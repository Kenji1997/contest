{"version":3,"sources":["webpack:///src/app/modules/diagnose/diagnose-routing.module.ts","webpack:///src/app/modules/diagnose/diagnose-text/diagnose-text.component.ts","webpack:///src/app/modules/diagnose/diagnose-text/diagnose-text.component.html","webpack:///src/app/modules/diagnose/diagnose.component.ts","webpack:///src/app/modules/diagnose/diagnose.component.html","webpack:///src/app/modules/diagnose/diagnose.module.ts","webpack:///src/app/modules/diagnose/policy-guide/policy-guide.component.ts","webpack:///src/app/modules/diagnose/policy-guide/policy-guide.component.html","webpack:///src/app/modules/diagnose/regression-test-box/regression-test-box.component.ts","webpack:///src/app/modules/diagnose/regression-test-box/regression-test-box.component.html","webpack:///src/app/modules/diagnose/topic/topic.component.ts","webpack:///src/app/modules/diagnose/topic/topic.component.html","webpack:///src/app/pipes/index.ts","webpack:///src/app/pipes/right-underscore/right-underscore.pipe.ts","webpack:///src/app/pipes/risk-level-to-color/risk-level-to-color.pipe.ts","webpack:///src/app/services/diagnose/diagnose.service.ts","webpack:///src/app/services/policy/policy.service.ts"],"names":["routes","path","component","DiagnoseRoutingModule","forChild","imports","exports","DiagnoseTextComponent","wordDiagnosed","handleGroupWord","extended","generalRiskTopic","dataGrouped","reduce","memo","slot","index","text","original","tokens","previousWord","prevOriginal","prevTokens","mergeTokens","Object","assign","word","wordFromSlot","push","solution","chosenToken","find","token","level","topics","tokensReverse","reverse","filterToken","tokenFlated","flat","mapTextToken","hasOwnProperty","values","selector","templateUrl","styleUrls","DiagnoseComponent","userService","policyService","diagnoseService","route","isDeep","isLoading","isShowRegressionBox","isError","keyWord","predictions","policyGuides","policies","failingFragments","selectedContentType","contentTypeList","isDefaultActiveDeeperAnalysis","searchSubscription","searchInput","clientId","language","contentType","me","user","getPolicyGuides","add","queryParams","subscribe","params","preferences","lastClientId","lastContentType","onSearch","unsubscribe","search","searchResult","handleTopics","handlePolicies","policyModels","hideLoading","handleFailingFragments","console","error","combineRule","map","policyGuide","rules","ruleTopics","rule","topic","includes","failTopic","isSafe","riskLevel","riskThreshold","searchText","fragment","startPos","endPos","slice","setTimeout","updatePreferences","newClient","value","currentUrl","window","location","href","el","document","createElement","body","appendChild","select","execCommand","removeChild","onCopy","onRefresh","onLanguageChanged","onContentTypeChanged","onUserChangedClient","onDeeperAnalysisChanged","DiagnoseModule","declarations","SAFE_POLICY","icon","color","UN_SAFE_POLICY","PolicyGuideComponent","policy","name","RegressionTestBoxComponent","defaultLanguage","topicArray","riskLevels","isShow","_close","entries","faIcon","riskColor","log","emit","currentTopic","newLevel","topicSelected","onClose","onTopicPickerChanged","Type","TopicComponent","type","topicData","RightUnderscorePipe","args","replace","RiskLevelToColorPipe","DiagnoseService","api","classifyText","toPromise","providedIn","PolicyService","defaultPolicyGuide"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;QAWaC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,gBAHvB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGuB,EAFtB,4DAEsB;;;;0HAArBG,qB,EAAqB;AAAA;AAAA,kBAFtB,4DAEsB;AAAA,O;AAFV,K;;;;;sEAEXA,qB,EAAqB;cAJjC,sDAIiC;eAJxB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIwB,Q;;;;;;;;;;;;;;;;;;ACflC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACqB4B;;;;;;AAEI,yFAAmB,OAAnB,EAAmB,eAAnB;;;;;;AAhBhB;;AACI;;AACI;;;;AAEC;;AAAmC;;AACxC;;AACA;;AACI;;AAAmB;;AAAe;;AACtC;;AACA;;AACI;;AAAuB;;AAAmB;;AAC9C;;AACA;;AACI;;AACI;;;;AAMJ;;AACJ;;AACJ;;;;;;;;AAnBY;;AAAA;;AACH;;AAAA;;AAGkB;;AAAA;;AAGI;;AAAA;;AAKf;;AAAA;;;;;;AArB5B;;AACI;;AAAiC;;AAAmB;;AACpD;;;;AACI;;AAAM;;AAAe;;AAErB;;AACI;;AAuBJ;;AACJ;;AACJ;;;;;;AA9BqC;;AAAA;;AACA;;AAAA;;AACvB;;AAAA;;AAGc;;AAAA;;;;QDSnBC,qB;;;AAKX,uCAAc;AAAA;AAAG;;;;mCAET;AACN,eAAKC,aAAL,GAAqB,KAAKC,eAAL,CAAqB,KAAKC,QAA1B,CAArB;AACA,eAAKC,gBAAL,GAAwB,8DAAxB;AACD;AAED;;;;;;;;wCAKiBD,Q,EAAsB;AAAA;;AACrC,cAAME,WAAW,GAAGF,QAAQ,CAACG,MAAT,CAAgB,UAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,EAAuB;AAAA,gBACjDC,IADiD,GACtBF,IADsB,CACjDE,IADiD;AAAA,gBAC3CC,QAD2C,GACtBH,IADsB,CAC3CG,QAD2C;AAAA,gBACjCC,MADiC,GACtBJ,IADsB,CACjCI,MADiC;;AAEzD,gBAAGF,IAAI,KAAK,EAAZ,EAAgB;AACd,kBAAIG,YAAY,GAAGN,IAAI,CAACE,KAAK,GAAC,CAAP,CAAvB;AADc,kCAEuCI,YAFvC;AAAA,kBAEEC,YAFF,iBAERH,QAFQ;AAAA,kBAEwBI,UAFxB,iBAEgBH,MAFhB,EAId;;AACAE,0BAAY,aAAMA,YAAN,cAAsBH,QAAtB,CAAZ,CALc,CAOd;;AACAI,wBAAU,GAAG,KAAI,CAACC,WAAL,CAAiBD,UAAjB,EAA6BH,MAA7B,CAAb;AAEAC,0BAAY,GAAGI,MAAM,CAACC,MAAP,CAAcL,YAAd,EAA4B;AACzCF,wBAAQ,EAAEG,YAD+B;AAEzCF,sBAAM,EAAEG;AAFiC,eAA5B,CAAf;AAID,aAdD,MAcO;AACL,kBAAMI,IAAI,GAAG,KAAI,CAACC,YAAL,CAAkBZ,IAAlB,CAAb;;AACAD,kBAAI,CAACc,IAAL,CAAUF,IAAV;AACD;;AAED,mBAAOZ,IAAP;AACD,WAtBmB,EAsBjB,EAtBiB,CAApB;AAwBA,iBAAOF,WAAP;AACD;AAED;;;;;;;qCAIcG,I,EAAW;AAAA,cACfE,IADe,GACsBF,IADtB,CACfE,IADe;AAAA,cACTY,QADS,GACsBd,IADtB,CACTc,QADS;AAAA,cACCX,QADD,GACsBH,IADtB,CACCG,QADD;AAAA,cACWC,MADX,GACsBJ,IADtB,CACWI,MADX;AAEvB,cAAMW,WAAW,GAAGX,MAAM,CAACY,IAAP,CAAY,UAAAC,KAAK;AAAA,mBAAIA,KAAK,CAACf,IAAN,KAAeY,QAAnB;AAAA,WAAjB,CAApB;AACA,cAAMI,KAAK,GAAGH,WAAW,CAACI,MAAZ,CAAmB,8DAAnB,CAAd,CAHuB,CAKvB;;AACA,cAAMC,aAAa,GAAGhB,MAAM,CAACiB,OAAP,EAAtB;AACA,cAAMC,WAAW,GAAG,KAAKd,WAAL,CAAiBY,aAAjB,CAApB;AAEA,iBAAO;AAAElB,gBAAI,EAAJA,IAAF;AAAQC,oBAAQ,EAARA,QAAR;AAAkBe,iBAAK,EAALA,KAAlB;AAAyBd,kBAAM,EAAEkB;AAAjC,WAAP;AACD;AAED;;;;;;sCAG2C;AAAA,4CAA3BlB,MAA2B;AAA3BA,kBAA2B;AAAA;;AACzC,cAAMmB,WAAW,GAAGnB,MAAM,CAACoB,IAAP,EAApB;AACA,cAAMC,YAAY,GAAGF,WAAW,CAACzB,MAAZ,CAAmB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACtD,gBAAK,CAACD,IAAI,CAAC2B,cAAL,CAAoB1B,IAAI,CAACE,IAAzB,CAAN,EAAuC;AACrCH,kBAAI,CAACC,IAAI,CAACE,IAAN,CAAJ,GAAkBF,IAAlB;AACD;;AAED,mBAAOD,IAAP;AACD,WANoB,EAMlB,EANkB,CAArB;AAQA,iBAAOU,MAAM,CAACkB,MAAP,CAAcF,YAAd,CAAP;AACD;;;;;;;uBA3EUjC,qB;AAAqB,K;;;YAArBA,qB;AAAqB,wC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,sa;AAAA;AAAA;AChBlC;;AACI;;AAgCJ;;;;AAhC0B;;AAAA;;;;;;;;;;sEDebA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACToC,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKuB,Q;;;;gBAC/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEjBH;;AACA;;AACA;;;;;AC0DwB;;AAA2E;;AAAsB;;;;;;AAAtB;;AAAA;;;;;;AAMvE;;;;;;AAEI,yFAAmB,OAAnB,EAAmB,eAAnB;;;;;;AAHR;;AACI;;;;AAKA;;AAA+B;;AAAkB;;AACrD;;;;;;AALQ;;AAAA;;AAI2B;;AAAA;;;;;;AAWnC;;;;;;AAEI,yFAAmB,OAAnB,EAAmB,eAAnB;;;;;;AAOJ;;;;;;AAEI;;;;;;AAOR;;;;;;;;AAEI,2JAAsC,OAAtC,EAAsC,gBAAtC;;;;;;;;;;;;;;AAjDhB;;AACI;;AACI;;AAEA;;AACI;;AAA0B;;AAAiB;;AAC3C;;AACI;;AACJ;;AAEA;;AAA0B;;AAAqB;;AAC/C;;AACI;;AAQJ;;AACJ;;AACJ;;AAEA;;AACI;;AAA+B;;AAAa;;AAC5C;;AACI;;AACI;;AAA4B;;AAAM;;AAClC;;;;AAKJ;;AAEA;;AACI;;AAA4B;;AAAa;;AACzC;;AAIJ;;AACJ;;AAEA;;AACI;;AAA4B;;AAAa;;AACzC;;;;AAKJ;;AAEA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAgC;;AAAQ;;AAC1E;;AAA2C;;AAAW;;AACtD;;AAAyC;;AAAW;;AACxD;;AACJ;;AAEA;;AAAyB;AAAA;;AAAA;;AAAA;AAAA;;AAAmF;;AAChH;;;;;;AA5D2B;;AAAA;;AAEK;;AAAA;;AAGkB;;AAAA;;AAKJ;;AAAA;;AAaP;;AAAA;;AAKnB;;AAAA;;AASA;;AAAA;;AASJ;;AAAA;;AAa+C;;AAAA,wGAA8B,QAA9B,EAA8B,cAA9B;;;;QD3F1DC,iB;;;AA6BX,iCACSC,WADT,EAESC,aAFT,EAGUC,eAHV,EAIUC,KAJV,EAI+B;AAAA;;AAHtB,aAAAH,WAAA,GAAAA,WAAA;AACA,aAAAC,aAAA,GAAAA,aAAA;AACC,aAAAC,eAAA,GAAAA,eAAA;AACA,aAAAC,KAAA,GAAAA,KAAA;AA/BV,aAAAC,MAAA,GAAS,KAAT;AACA,aAAAC,SAAA,GAAY,IAAZ;AACA,aAAAC,mBAAA,GAAsB,KAAtB;AACA,aAAAC,OAAA,GAAU,KAAV;AAEA,aAAAC,OAAA,GAAU,EAAV;AACA,aAAAC,WAAA,GAAuC,EAAvC;AACA,aAAAtB,MAAA,GAAmC,EAAnC;AACA,aAAAuB,YAAA,GAAmC,EAAnC;AACA,aAAAC,QAAA,GAA0B,EAA1B;AACA,aAAAC,gBAAA,GAAmC,EAAnC;AACA,aAAAjD,QAAA,GAAyB,EAAzB,CAoB+B,CAlB/B;;AACA,aAAAkD,mBAAA,GAAsB,gEAAtB;AACA,aAAAC,eAAA,GAAkB,yDAAlB;AAEA,aAAAC,6BAAA,GAAgC,KAAhC;AAEA,aAAAC,kBAAA,GAAmC,IAAI,iDAAJ,EAAnC;AACA,aAAAC,WAAA,GAAyB;AACvB/C,cAAI,EAAE,EADiB;AAEvBgD,kBAAQ,EAAE,2DAFa;AAGvBC,kBAAQ,EAAE,6DAHa;AAIvBC,qBAAW,EAAE;AAJU,SAAzB;AAYK;;;;mCAES;;;;;;;;;;;AAEA,2BAAM,KAAKpB,WAAL,CAAiBqB,EAAjB,EAAN;;;AAAZ,yBAAKC,I;AAEL;AACA,yBAAKZ,YAAL,GAAoB,KAAKT,aAAL,CAAmBsB,eAAnB,EAApB,C,CAEA;;AACA,yBAAKP,kBAAL,CAAwBQ,GAAxB,CAA4B,KAAKrB,KAAL,CAAWsB,WAAX,CAAuBC,SAAvB,CAAiC,UAAAC,MAAM,EAAI;AACrE,0BAAIA,MAAM,CAACjC,cAAP,CAAsB,kEAAtB,CAAJ,EAAiD;AAC/C;AAD+C,oDAEK,MAAI,CAACM,WAAL,CAAiB4B,WAFtB;AAAA,4BAEvCC,YAFuC,yBAEvCA,YAFuC;AAAA,4BAEzBC,eAFyB,yBAEzBA,eAFyB;AAAA,4BAERX,QAFQ,yBAERA,QAFQ;AAG/C,8BAAI,CAACF,WAAL,GAAmB;AACjB/C,8BAAI,EAAEyD,MAAM,CAAC,kEAAD,CADK;AAEjBT,kCAAQ,EAAEW,YAFO;AAGjBT,qCAAW,EAAEU,eAHI;AAIjBX,kCAAQ,EAARA;AAJiB,yBAAnB;;AAOA,8BAAI,CAACY,QAAL;AACD,uBAXD,MAWO;AACL,8BAAI,CAAC1B,SAAL,GAAiB,KAAjB;AACA,8BAAI,CAACE,OAAL,GAAe,IAAf;AACD;AACF,qBAhB2B,CAA5B;;;;;;;;;AAiBD;;;sCAEU;AACT,eAAKS,kBAAL,CAAwBgB,WAAxB;AACD;;;mCAEa;;;;;;;;;;;AAEV;AACA,yBAAKzB,OAAL,GAAe,KAAf;AACA,yBAAKF,SAAL,GAAiB,IAAjB,C,CAEA;;;AACqB,2BAAM,KAAKH,eAAL,CAAqB+B,MAArB,CAA4B,KAAKhB,WAAjC,CAAN;;;AAAfiB,gC;AAEN;AACA,yBAAK1B,OAAL,GAAe0B,YAAY,CAAChE,IAA5B,C,CAEA;;AACA,yBAAKuC,WAAL,GAAmByB,YAAY,CAACzB,WAAhC,C,CAEA;;AACA,yBAAK9C,QAAL,GAAgBuE,YAAY,CAACvE,QAA7B,C,CAEA;;AACMwB,0B,GAAmC+C,YAAY,CAAC/C,M;AACtD,yBAAKA,MAAL,GAAc,KAAKgD,YAAL,CAAkBhD,MAAlB,EAA0B,KAAKuB,YAA/B,CAAd,C,CAEA;;2CACyB,KAAK0B,cAAL,CAAoBjD,MAApB,EAA4B,KAAKuB,YAAjC,C,EAAjB2B,Y,wBAAAA,Y;AACR,yBAAK1B,QAAL,GAAgB0B,YAAhB;AAEA,yBAAKC,WAAL,G,CAEA;;AACM1B,oC,GAAmBsB,YAAY,CAACtB,gB;AACtC,yBAAKA,gBAAL,GAAwB,KAAK2B,sBAAL,CAA4B3B,gBAA5B,EAA8C,KAAKF,YAAnD,EAAiE,KAAKF,OAAtE,CAAxB;;;;;;;AAEAgC,2BAAO,CAACC,KAAR,CAAc,2CAAd;AACA,yBAAKpC,SAAL,GAAiB,KAAjB;AACA,yBAAKE,OAAL,GAAe,IAAf;;;;;;;;;AAEH;AAED;;;;;;qCAGcpB,M,EAAkCuB,Y,EAAkC;AAChF;AACA,cAAMgC,WAAW,GAAsBhC,YAAY,CAACiC,GAAb,CAAiB,UAAAC,WAAW;AAAA,mBAAIA,WAAW,CAACC,KAAhB;AAAA,WAA5B,EAAmDrD,IAAnD,EAAvC;AACA,cAAMsD,UAAU,GAAGJ,WAAW,CAACC,GAAZ,CAAgB,UAAAI,IAAI;AAAA,mBAAIA,IAAI,CAACC,KAAT;AAAA,WAApB,CAAnB;;AAEA,eAAK,IAAMA,KAAX,IAAoB7D,MAApB,EAA4B;AAC1B,gBAAI,CAAC2D,UAAU,CAACG,QAAX,CAAoBD,KAApB,CAAL,EAAiC;AAC/B,qBAAO7D,MAAM,CAAC6D,KAAD,CAAb;AACD;AACF;;AACD,iBAAO7D,MAAP;AACD;AAED;;;;;;;;uCAKgBA,M,EAAkCuB,Y,EAAkC;AAClF,cAAMwC,SAAS,GAAG,EAAlB,CADkF,CAGlF;;AACA,cAAMb,YAAY,GAAG3B,YAAY,CAACiC,GAAb,CAAiB,UAAAC,WAAW,EAAI;AACnD,gBAAIO,MAAM,GAAG,IAAb,CADmD,CAEnD;;AAFmD;AAAA;AAAA;;AAAA;AAGnD,mCAAmBP,WAAW,CAACC,KAA/B,8HAAsC;AAAA,oBAA3BE,IAA2B;AAAA,oBAC5BC,KAD4B,GAClBD,IADkB,CAC5BC,KAD4B;;AAEpC,oBAAI7D,MAAM,CAACO,cAAP,CAAsBsD,KAAtB,CAAJ,EAAkC;AAChC,sBAAMI,SAAS,GAAGjE,MAAM,CAAC6D,KAAD,CAAxB;AACA,sBAAMK,aAAa,GAAGN,IAAI,CAACM,aAA3B;;AAEA,sBAAID,SAAS,IAAIC,aAAjB,EAAgC;AAC9BH,6BAAS,CAACF,KAAD,CAAT,GAAmBI,SAAnB;AACAD,0BAAM,GAAG,KAAT,CAF8B,CAG9B;AACD;AACF;AACF;AAfkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBnD,mBAAQ;AAAEA,oBAAM,EAANA,MAAF;AAAUP,yBAAW,EAAXA;AAAV,aAAR;AACD,WAlBoB,CAArB;AAoBA,iBAAO;AAAEP,wBAAY,EAAZA,YAAF;AAAgBa,qBAAS,EAATA;AAAhB,WAAP;AACD;;;+CAEuBtC,gB,EAA0CF,Y,EAAkC4C,U,EAAoB;AAAA;;AACtH,iBAAO1C,gBAAgB,CAAC+B,GAAjB,CAAqB,UAAAY,QAAQ,EAAI;AAAA,gBAC9BpE,MAD8B,GACDoE,QADC,CAC9BpE,MAD8B;AAAA,gBACtBqE,QADsB,GACDD,QADC,CACtBC,QADsB;AAAA,gBACZC,MADY,GACDF,QADC,CACZE,MADY;;AAAA,wCAEhB,MAAI,CAACrB,cAAL,CAAoBjD,MAApB,EAA4BuB,YAA5B,CAFgB;AAAA,gBAE9BwC,SAF8B,yBAE9BA,SAF8B;;AAGtC,gBAAM/E,QAAQ,GAAGmF,UAAU,CAACI,KAAX,CAAiBF,QAAjB,EAA2BC,MAA3B,CAAjB;AACA,mBAAO,MAAP,OAAO,CAAP,kBAAYF,QAAZ,CAAO,EAAkB;AAAEL,uBAAS,EAATA,SAAF;AAAa/E,sBAAQ,EAARA;AAAb,aAAlB,CAAP;AACD,WALM,CAAP;AAMD;;;sCAEU;AAAA;;AACTwF,oBAAU,CAAC,YAAM;AAAE,kBAAI,CAACtD,SAAL,GAAiB,KAAjB;AAAyB,WAAlC,EAAoC,GAApC,CAAV;AACD;;;oCAEQ;AACP,eAAK0B,QAAL;AACD;;;0CAEkBZ,Q,EAAkB;AACnC,eAAKF,WAAL,CAAiBE,QAAjB,GAA4BA,QAA5B;AACA,eAAKnB,WAAL,CAAiB4D,iBAAjB,CAAmC;AAAEzC,oBAAQ,EAARA;AAAF,WAAnC;AACD;;;6CAEqBC,W,EAAkB;AACtC,eAAKH,WAAL,CAAiBG,WAAjB,GAA+BA,WAA/B;AACA,eAAKpB,WAAL,CAAiB4D,iBAAjB,CAAmC;AAAE9B,2BAAe,EAAEV;AAAnB,WAAnC;AACD;;;4CAEoByC,S,EAAmB;AACtC,eAAK5C,WAAL,CAAiBC,QAAjB,GAA4B2C,SAA5B;AACA,eAAK7D,WAAL,CAAiB4D,iBAAjB,CAAmC;AAAE/B,wBAAY,EAAEgC;AAAhB,WAAnC;AACD;;;gDAEwBC,K,EAAgB;AACvC,eAAK1D,MAAL,GAAc0D,KAAd;AACD;;;8CAEkB;AACjB,eAAKxD,mBAAL,GAA2B,IAA3B;AACD;;;+CAEmB;AAClB,eAAKA,mBAAL,GAA2B,KAA3B;AACD;;;iCAEK;AACJ,cAAMyD,UAAU,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAnC;AACA,cAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAX;AACAF,YAAE,CAACL,KAAH,GAAWC,UAAX;AACAK,kBAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,EAA1B;AACAA,YAAE,CAACK,MAAH;AACAJ,kBAAQ,CAACK,WAAT,CAAqB,MAArB;AACAL,kBAAQ,CAACE,IAAT,CAAcI,WAAd,CAA0BP,EAA1B;AACD;;;;;;;uBA7MUpE,iB,EAAiB,mJ,EAAA,qJ,EAAA,2J,EAAA,+H;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,a;AAAA,sgD;AAAA;AAAA;ACvB9B;;AACI;;AACI;;AACI;;AAAkB;;AAAQ;;AAE1B;;AACI;;AACA;;AAAyB;AAAA,mBAAS,IAAA4E,MAAA,EAAT;AAAiB,WAAjB;;AACrB;;AACI;;AACJ;;AACJ;;AACJ;;AACJ;;AAEA;;AACI;;AAA4B;AAAA,mBAAS,IAAAC,SAAA,EAAT;AAAoB,WAApB;;AACxB;;AACI;;AAA0B;;AAAS;;AACvC;;AACJ;;AAEA;;AAII;AAAA,mBAAmB,IAAAC,iBAAA,QAAnB;AAA4C,WAA5C;;AACH;;AAED;;AAGI;AAAA,mBAAiB,IAAAC,oBAAA,QAAjB;AAA6C,WAA7C;;AACH;;AAGD;;AAEI;AAAA,mBAAiB,IAAAC,mBAAA,QAAjB;AAA4C,WAA5C;;AACH;;AAED;;AACI;;AAEI;AAAA,mBAAc,IAAAC,uBAAA,QAAd;AAA6C,WAA7C;;AACH;;AAED;;AAAM;;AAAe;;AACzB;;AACJ;;AACJ;;AAEA;;AACI;;AA+DJ;;AACJ;;;;AA5FgB;;AAAA;;AAKA;;AAAA,oGAA4B,eAA5B,EAA4B,2CAA5B;;AAOA;;AAAA;;AAMI;;AAAA;;AASO;;AAAA,6FAAqB,OAArB,EAAqB,WAArB;;AACd;;AAAA;;;;;;;;;;sED9BAjF,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTH,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAE,2BAAF;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEvB9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAgCamF,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,gBARhB,CACP,4DADO,EAEP,+DAFO,EAGP,8EAHO,EAIP,yGAJO,EAKP,mEALO,CAQgB;;;;0HAAdA,c,EAAc;AAAA,uBAhBvB,qEAgBuB,EAfvB,qEAeuB,EAdvB,yFAcuB,EAbvB,iEAauB,EAZvB,kEAYuB,EAXvB,6FAWuB,EAVvB,8GAUuB;AAVG,kBAG1B,4DAH0B,EAI1B,+DAJ0B,EAK1B,8EAL0B,EAM1B,yGAN0B,EAO1B,mEAP0B;AAUH,O;AAHb,K;;;;;sEAGDA,c,EAAc;cAlB1B,sDAkB0B;eAlBjB;AACRC,sBAAY,EAAE,CACZ,qEADY,EAEZ,qEAFY,EAGZ,yFAHY,EAIZ,iEAJY,EAKZ,kEALY,EAMZ,6FANY,EAOZ,8GAPY,CADN;AAUR5H,iBAAO,EAAE,CACP,4DADO,EAEP,+DAFO,EAGP,8EAHO,EAIP,yGAJO,EAKP,mEALO;AAVD,S;AAkBiB,Q;;;;;;;;;;;;;;;;;;AChC3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,QAAM6H,WAAW,GAAG;AAClBC,UAAI,EAAE,kBADY;AAElBC,WAAK,EAAE;AAFW,KAApB;AAKA,QAAMC,cAAc,GAAG;AACrBF,UAAI,EAAE,oBADe;AAErBC,WAAK,EAAE;AAFc,KAAvB;;QAUaE,oB;;;AAMX,sCAAc;AAAA;AAAG;;;;mCAET;AAAA,6BAC0B,KAAKC,MAD/B;AAAA,cACErC,MADF,gBACEA,MADF;AAAA,cACUP,WADV,gBACUA,WADV;;AAAA,qBAGkBO,MAAM,GAAGgC,WAAH,GAAiBG,cAHzC;AAAA,cAGEF,IAHF,QAGEA,IAHF;AAAA,cAGQC,KAHR,QAGQA,KAHR;;AAIN,eAAKD,IAAL,GAAYA,IAAZ;AACA,eAAKC,KAAL,GAAaA,KAAb;AACA,eAAKI,IAAL,GAAY7C,WAAW,CAAC6C,IAAxB;AACD;;;;;;;uBAfUF,oB;AAAoB,K;;;YAApBA,oB;AAAoB,uC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,0F;AAAA;AAAA;AClBjC;;AACI;;AACA;;AAA0C;;AAAU;;AACxD;;;;AAHoB;;AACY;;AAAA;;AACD;;AAAA;;AAAe;;AAAA;;;;;;;;sEDgBjCA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT3F,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKsB,Q;;;;gBAC9B;;;;;;;;;;;;;;;;;;;;AEnBH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;ACkBwB;;AACI;;AACI;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAKC;;AACL;;AACJ;;;;;;;;AATyD;;AAGjD;;AAAA;;AAEA;;AADA;;AAGC;;AAAA;;;;;;AAZjB;;AACI;;AACA;;AAA4C;;AAAgB;;AAE5D;;AACI;;;;AAUJ;;AACJ;;;;;;;;AAf+B;;AAAA;;AACJ;;AAAA;;AAAqB;;AAAA;;AAG3B;;AAAA;;;;;;;;;;QDHxB4F,0B;;;AAQX;AAAA;;AAPA,aAAAC,eAAA,GAAkB,6DAAlB;AACA,aAAAC,UAAA,GAAoC,EAApC;AACA,aAAAC,UAAA,GAAa,wDAAb;AACS,aAAA1G,MAAA,GAAmC,EAAnC;AACA,aAAA2G,MAAA,GAAS,KAAT;AACC,aAAAC,MAAA,GAAS,IAAI,0DAAJ,EAAT;AAEQ;;;;mCAEV;AACN;AACA,eAAKH,UAAL,GAAkBnH,MAAM,CAACuH,OAAP,CAAe,KAAK7G,MAApB,EAA4BwD,GAA5B,CAAgC,iBAAsB;AAAA;AAAA,gBAAnBK,KAAmB;AAAA,gBAAZ9D,KAAY;;AAAA,wCACvC,qDAAO8D,KAAP,CADuC;AAAA,gBAC9DyC,IAD8D,yBAC9DA,IAD8D;AAAA,gBAChDL,IADgD,yBACxDa,MADwD;AAEtE,gBAAMC,SAAS,GAAG,yDAAWhH,KAAX,EAAkBmG,KAApC;AAEA,mBAAO;AAAEI,kBAAI,EAAJA,IAAF;AAAQvG,mBAAK,EAALA,KAAR;AAAekG,kBAAI,EAAJA,IAAf;AAAqBc,uBAAS,EAATA;AAArB,aAAP;AACD,WALiB,CAAlB;AAMD;;;kCAEM;AACL1D,iBAAO,CAAC2D,GAAR,CAAY,4CAAZ;AACA,eAAKL,MAAL,GAAc,KAAd;;AACA,eAAKC,MAAL,CAAYK,IAAZ,CAAiB,KAAjB;AACD,S,CAED;;;;0CACmBjF,Q,EAAU;AAC3BqB,iBAAO,CAAC2D,GAAR,CAAY,iEAAZ,EAA+EhF,QAA/E;AACD,S,CAED;;;;sCACekF,Y,EAA8BC,Q,EAAkB;AAC7D9D,iBAAO,CAAC2D,GAAR,CAAY,gFAAZ,EAA8FE,YAA9F,EAA4GC,QAA5G;AACD,S,CAED;;;;6CACsBC,a,EAAoC;AACxD/D,iBAAO,CAAC2D,GAAR,CAAY,oEAAZ,EAAkFI,aAAlF;AACD;;;;;;;uBAvCUb,0B;AAA0B,K;;;YAA1BA,0B;AAA0B,8C;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,+wB;AAAA;AAAA;ACfvC;;AAEI;;AAAqB;AAAA,mBAAS,IAAAc,OAAA,EAAT;AAAkB,WAAlB;;AAAoB;;AAGzC;;AACI;;AAAkB;;AAA8B;;AAGhD;;AACI;;AAAqB;;AAAyB;;AAE9C;;AACI;;AAiBJ;;AACJ;;AAGA;;AACI;;AAAqB;;AAAU;;AAE/B;;AAA2C;AAAA,mBAAmB,IAAAC,oBAAA,QAAnB;AAA+C,WAA/C;;AAAiD;;AAChG;;AAGA;;AACI;;AAAqB;;AAAe;;AAEpC;;AAA0D;AAAA,mBAAmB,IAAA5B,iBAAA,QAAnB;AAA4C,WAA5C;;AAC1D;;AACJ;;AAGA;;AACI;;AAAqB;;AAAe;;AAEpC;;AACJ;;AAGA;;AACI;;AAAyC;;AAAK;;AAC9C;;AAAmC;AAAA,mBAAS,IAAA2B,OAAA,EAAT;AAAkB,WAAlB;;AAAoB;;AAAM;;AACjE;;AAGA;;AAA0B;AAAA,mBAAS,IAAAA,OAAA,EAAT;AAAkB,WAAlB;;AACtB;;AAA0B;;AAAK;;AAC/B;;AAAM;;AAAK;;AACf;;AACJ;;AACJ;;;;AAnEgC;;AAaQ;;AAAA;;AAwBV;;AAAA;;AAOG;;AAAA;;;;;;;;;;sED7BpBd,0B,EAA0B;cALtC,uDAKsC;eAL5B;AACT9F,kBAAQ,EAAE,yBADD;AAETC,qBAAW,EAAE,sCAFJ;AAGTC,mBAAS,EAAE,CAAE,sCAAF;AAHF,S;AAK4B,Q;;;;gBAIpC;;;gBACA;;;gBACA;;;;;;;;;;;;;;;;;;;;AErBH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEI;;AACI;;AACA;;AAA0B;;AAAW;;AACzC;;;;;;AAHkC;;AACH;;AAAA;;AACD;;AAAA;;;;;;AAI9B;;AACI;;AACA;;AAAmD;;AAAoB;;AACvE;;AAA0B;;AAAW;;AACzC;;;;;;AAJmB;;AACY;;AAAA;;AACD;;AAAA;;AAAyB;;AAAA;;AACzB;;AAAA;;;;ADRlC,QAAK4G,IAAL;;AAAA,eAAKA,IAAL,EAAS;AACP;AACD,KAFD,EAAKA,IAAI,KAAJA,IAAI,MAAT;;QASaC,c;;;AAQX,gCAAc;AAAA;;AALL,aAAAC,IAAA,GAAa,IAAb;AAKQ;;;;mCAET;AACN,eAAKC,SAAL,GAAiB,qDAAO,KAAK7D,KAAZ,CAAjB;AACA,eAAKkD,SAAL,GAAiB,yDAAW,KAAKhH,KAAhB,EAAuBmG,KAAxC;AACD;;;;;;;uBAbUsB,c;AAAc,K;;;YAAdA,c;AAAc,gC;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,oS;AAAA;AAAA;ACZ3B;;AAEI;;AAMA;;AAKJ;;;;AAbmB;;AAEqD;;AAAA;;;;;;;;;sEDU3DA,c,EAAc;cAL1B,uDAK0B;eALhB;AACT/G,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;gBACxB;;;gBACA;;;gBACA;;;;;;;;;;;;;;;;;;;;AEfH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAKagH,mB;;;;;;;;;kCAEDhD,K,EAAeiD,I,EAAU;AACjCjD,eAAK,GAAGA,KAAK,CAACkD,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;AACA,iBAAOlD,KAAP;AACD;;;;;;;uBALUgD,mB;AAAmB,K;;;;YAAnBA,mB;AAAmB;;;;;sEAAnBA,mB,EAAmB;cAH/B,kDAG+B;eAH1B;AACJrB,cAAI,EAAE;AADF,S;AAG0B,Q;;;;;;;;;;;;;;;;;;ACLhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMawB,oB;;;;;;;;;kCAED/H,K,EAAU;AAClB,cAAMkE,SAAS,GAAG,yDAAWlE,KAAX,CAAlB;AACA,iBAAOkE,SAAS,CAACiC,KAAjB;AACD;;;;;;;uBALU4B,oB;AAAoB,K;;;;YAApBA,oB;AAAoB;;;;;sEAApBA,oB,EAAoB;cAHhC,kDAGgC;eAH3B;AACJxB,cAAI,EAAE;AADF,S;AAG2B,Q;;;;;;;;;;;;;;;;;;ACNjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMayB,e;;;AAEX,+BAAoBC,GAApB,EAAyC;AAAA;;AAArB,aAAAA,GAAA,GAAAA,GAAA;AAAuB;;;;+BAEpCxF,M,EAAoB;AACzB,iBAAO,KAAKwF,GAAL,CAASC,YAAT,CAAsBzF,MAAtB,EAA8B0F,SAA9B,EAAP;AACD;;;;;;;uBANUH,e,EAAe,mI;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFd;;;;;sEAEDA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACVI,oBAAU,EAAE;AADF,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;;;ACN5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaC,a;;;AAiBX,+BAAc;AAAA;;AAhBd,aAAAC,kBAAA,GAAyC,CACvC;AACE/B,cAAI,EAAE,aADR;AAEE5C,eAAK,EAAE,CACL;AAAEG,iBAAK,EAAE,GAAT;AAAcK,yBAAa,EAAE;AAA7B,WADK,EAEL;AAAEL,iBAAK,EAAE,GAAT;AAAcK,yBAAa,EAAE;AAA7B,WAFK;AAFT,SADuC,EAQvC;AACEoC,cAAI,EAAE,cADR;AAEE5C,eAAK,EAAE,CACL;AAAEG,iBAAK,EAAE,GAAT;AAAcK,yBAAa,EAAE;AAA7B,WADK;AAFT,SARuC,CAAzC;AAgBiB;;;;0CAEC;AAChB;AACA;AACA,iBAAO,KAAKmE,kBAAZ;AACD;;;;;;;uBAvBUD,a;AAAa,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFZ;;;;;sEAEDA,a,EAAa;cAHzB,wDAGyB;eAHd;AACVD,oBAAU,EAAE;AADF,S;AAGc,Q","file":"modules-diagnose-diagnose-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DiagnoseComponent } from './diagnose.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DiagnoseComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DiagnoseRoutingModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Slots, Rule } from 'classify-text-swagger-client';\nimport { generalRiskTopic } from 'src/constants';\n\ninterface Word {\n  original: string,\n  text: string,\n  level: any,\n  tokens: Array<Rule>,\n}\n\n@Component({\n  selector: 'app-diagnose-text',\n  templateUrl: './diagnose-text.component.html',\n  styleUrls: ['./diagnose-text.component.less']\n})\nexport class DiagnoseTextComponent implements OnInit {\n  @Input() extended: Array<Slots>\n  wordDiagnosed: Array<Word>\n  generalRiskTopic: number;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.wordDiagnosed = this.handleGroupWord(this.extended);\n    this.generalRiskTopic = generalRiskTopic;\n  }\n\n  /* Note:\n   * + The rule we're using to group 2 or many word is the [text]\n   *   property will be empty when it was used on the prev token\n   * + We need to group [original] & tokens\n   */\n   handleGroupWord(extended: Array<Slots>): Array<Word> {\n    const dataGrouped = extended.reduce((memo, slot, index) => {\n      const { text, original, tokens } = slot;\n      if(text === '') {\n        let previousWord = memo[index-1];\n        let { original: prevOriginal, tokens: prevTokens } = previousWord;\n\n        // append the current original text to the previous one\n        prevOriginal = `${prevOriginal} ${original}`\n\n        // merge tokens\n        prevTokens = this.mergeTokens(prevTokens, tokens);\n\n        previousWord = Object.assign(previousWord, {\n          original: prevOriginal,\n          tokens: prevTokens\n        })\n      } else {\n        const word = this.wordFromSlot(slot);\n        memo.push(word)\n      }\n\n      return memo;\n    }, [])\n\n    return dataGrouped;\n  }\n\n  /*\n   * Handle [slot] data to set some properties like color, topics...\n   * Note: The color we're using get by trisk level of general-riskhe\n   */\n  wordFromSlot (slot: Slots): Word {\n    const { text, solution, original, tokens } = slot;\n    const chosenToken = tokens.find(token => token.text === solution);\n    const level = chosenToken.topics[generalRiskTopic];\n\n    // Note: Reverse array to show the grouping at the top. Need to confirm\n    const tokensReverse = tokens.reverse();\n    const filterToken = this.mergeTokens(tokensReverse);\n\n    return { text, original, level, tokens: filterToken };\n  }\n\n  /*\n   * Merge tokens which have dulpicate [text] property\n   */\n  mergeTokens (...tokens : Array<Array<Rule>>): Array<Rule> {\n    const tokenFlated = tokens.flat();\n    const mapTextToken = tokenFlated.reduce((memo, slot) => {\n      if ( !memo.hasOwnProperty(slot.text) ) {\n        memo[slot.text] = slot;\n      }\n\n      return memo;\n    }, {})\n\n    return Object.values(mapTextToken);\n  }\n}\n","<div class=\"diagnose-text\">\n    <div class=\"text-box\" *ngFor=\"let word of wordDiagnosed\">\n        <div class=\"text__item original\">{{ word.original }}</div>\n        <div class=\"text__item solution\" [style.--bg-color]=\"word.level | riskLevelToColor\">\n            <span>{{ word.text }}</span>\n\n            <div class=\"table detail-box\">\n                <div class=\"tr\" *ngFor=\"let rule of word.tokens\">\n                    <div class=\"td\">\n                        <span class=\"risk-level\"\n                            [style.--rule-risk-level]=\"rule.topics[generalRiskTopic] | riskLevelToColor\"\n                        >{{ rule.topics[generalRiskTopic] }}</span>\n                    </div>\n                    <div class=\"td\">\n                        <span class=\"name\">{{ rule.text }}</span>\n                    </div>\n                    <div class=\"td\">\n                        <span class=\"language\">{{ rule.language }}</span>\n                    </div>\n                    <div class=\"td\">\n                        <div class=\"topics\">\n                            <app-topic\n                                *ngFor=\"let topic of rule.topics | keyvalue\"\n                                [topic]=\"topic.key\"\n                                [level]=\"topic.value\"\n                                type=\"compact\"\n                            ></app-topic>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","/* eslint-disable import/extensions */\n/* eslint-disable no-unused-vars */\n/* eslint-disable sort-imports */\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from 'src/app/shared-components/user.service';\nimport { User } from 'src/app/shared-components/user';\nimport { DiagnoseService } from 'src/app/services/diagnose/diagnose.service';\nimport { PolicyService } from 'src/app/services/policy/policy.service';\nimport { ContentType, DefaultClient, DefaultContentType, DefaultLanguage, DiagnoseSearchParams, Policy, PolicyGuide, PolicyRule } from 'src/constants';\nimport { FailingFragment, Slots, TextInput } from 'classify-text-swagger-client';\nimport { Subscription } from 'rxjs';\n\ninterface Mistake extends FailingFragment {\n  original: string,\n  failTopic: { [key: string]: any },\n}\n\n@Component({\n  selector: 'app-diagnose',\n  templateUrl: './diagnose.component.html',\n  styleUrls: [ './diagnose.component.less' ]\n})\nexport class DiagnoseComponent implements OnInit, OnDestroy {\n  user: User;\n  isDeep = false;\n  isLoading = true;\n  isShowRegressionBox = false;\n  isError = false;\n\n  keyWord = '';\n  predictions: { [lang: string]: any } = {};\n  topics: { [topic: string]: any } = {};\n  policyGuides: Array<PolicyGuide> = [];\n  policies: Array<Policy> = [];\n  failingFragments: Array<Mistake> = [];\n  extended: Array<Slots> = [];\n\n  // Content type variables\n  selectedContentType = DefaultContentType;\n  contentTypeList = ContentType\n\n  isDefaultActiveDeeperAnalysis = false;\n\n  searchSubscription: Subscription = new Subscription();\n  searchInput: TextInput = {\n    text: '',\n    clientId: DefaultClient,\n    language: DefaultLanguage,\n    contentType: DefaultContentType,\n  };\n\n  constructor (\n    public userService: UserService,\n    public policyService: PolicyService,\n    private diagnoseService: DiagnoseService,\n    private route: ActivatedRoute\n  ) { }\n\n  async ngOnInit (): Promise<void> {\n    // get user data\n    this.user = await this.userService.me();\n\n    // get policy data\n    this.policyGuides = this.policyService.getPolicyGuides();\n\n    // get keyWord from url & call search\n    this.searchSubscription.add(this.route.queryParams.subscribe(params => {\n      if (params.hasOwnProperty(DiagnoseSearchParams)) {\n        // update search input to memo\n        const { lastClientId, lastContentType, language } = this.userService.preferences;\n        this.searchInput = {\n          text: params[DiagnoseSearchParams],\n          clientId: lastClientId,\n          contentType: lastContentType,\n          language,\n        };\n\n        this.onSearch();\n      } else {\n        this.isLoading = false;\n        this.isError = true;\n      }\n    }));\n  }\n\n  ngOnDestroy (): void {\n    this.searchSubscription.unsubscribe();\n  }\n\n  async onSearch () {\n    try {\n      // handle loading-indicator\n      this.isError = false;\n      this.isLoading = true;\n\n      // get data from Backend API\n      const searchResult = await this.diagnoseService.search(this.searchInput);\n\n      // Show original text on the sidebar\n      this.keyWord = searchResult.text;\n\n      // Prediction data for AI prediction component\n      this.predictions = searchResult.predictions;\n\n      // Extended data for diagnose-text component\n      this.extended = searchResult.extended;\n\n      // set topic data for topic component\n      const topics: { [topic: string]: any } = searchResult.topics;\n      this.topics = this.handleTopics(topics, this.policyGuides);\n\n      // set policies data for policy component\n      const { policyModels } = this.handlePolicies(topics, this.policyGuides);\n      this.policies = policyModels;\n\n      this.hideLoading();\n\n      // FailingFragments data for the spelling mistakes component\n      const failingFragments = searchResult.failingFragments;\n      this.failingFragments = this.handleFailingFragments(failingFragments, this.policyGuides, this.keyWord);\n    } catch (e) {\n      console.error('[Diagnose Component] onSearch get error: ', e);\n      this.isLoading = false;\n      this.isError = true;\n    }\n  }\n\n  /*\n   * get all topic relative with policy guide\n   */\n  handleTopics (topics: { [topic: string]: any }, policyGuides: Array<PolicyGuide>) {\n    // combine all rules of policies to an array\n    const combineRule: Array<PolicyRule> = policyGuides.map(policyGuide => policyGuide.rules).flat();\n    const ruleTopics = combineRule.map(rule => rule.topic);\n\n    for (const topic in topics) {\n      if (!ruleTopics.includes(topic)) {\n        delete topics[topic];\n      }\n    }\n    return topics;\n  }\n\n  /*\n   * Note: This function have 2 usecases for now:\n   *  + handle & add isSafe property for policy\n   *  + get all fail topic\n   */\n  handlePolicies (topics: { [topic: string]: any }, policyGuides: Array<PolicyGuide>) {\n    const failTopic = {};\n\n    // get array policies\n    const policyModels = policyGuides.map(policyGuide => {\n      let isSafe = true;\n      // check a policy is safe\n      for (const rule of policyGuide.rules) {\n        const { topic } = rule;\n        if (topics.hasOwnProperty(topic)) {\n          const riskLevel = topics[topic];\n          const riskThreshold = rule.riskThreshold;\n\n          if (riskLevel >= riskThreshold) {\n            failTopic[topic] = riskLevel;\n            isSafe = false;\n            // Don't break here, we still need to get all fail topics\n          }\n        }\n      }\n\n      return ({ isSafe, policyGuide });\n    });\n\n    return { policyModels, failTopic };\n  }\n\n  handleFailingFragments (failingFragments: Array<FailingFragment>, policyGuides: Array<PolicyGuide>, searchText: string) {\n    return failingFragments.map(fragment => {\n      const { topics, startPos, endPos } = fragment;\n      const { failTopic } = this.handlePolicies(topics, policyGuides);\n      const original = searchText.slice(startPos, endPos);\n      return { ...fragment, ...{ failTopic, original } };\n    });\n  }\n\n  hideLoading () {\n    setTimeout(() => { this.isLoading = false; }, 300);\n  }\n\n  onRefresh () {\n    this.onSearch();\n  }\n\n  onLanguageChanged (language: string) {\n    this.searchInput.language = language;\n    this.userService.updatePreferences({ language });\n  }\n\n  onContentTypeChanged (contentType: any) {\n    this.searchInput.contentType = contentType;\n    this.userService.updatePreferences({ lastContentType: contentType });\n  }\n\n  onUserChangedClient (newClient: number) {\n    this.searchInput.clientId = newClient;\n    this.userService.updatePreferences({ lastClientId: newClient });\n  }\n\n  onDeeperAnalysisChanged (value: boolean) {\n    this.isDeep = value;\n  }\n\n  onShowRegressionBox () {\n    this.isShowRegressionBox = true;\n  }\n\n  onCloseRegressionBox () {\n    this.isShowRegressionBox = false;\n  }\n\n  onCopy () {\n    const currentUrl = window.location.href;\n    const el = document.createElement('textarea');\n    el.value = currentUrl;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n}\n","<section id=\"diagnose\">\n    <div class=\"header\">\n        <div class=\"left-content\">\n            <h3 class=\"title\">Diagnose</h3>\n\n            <div class=\"header-breadcrumb\">\n                <app-breadcrumbs></app-breadcrumbs>\n                <div class=\"copy-button\" (click)=\"onCopy()\">\n                    <app-tooltip text=\"Copy URL to Clipboard\">\n                        <img src=\"/assets/icons/copy.svg\" alt=\"copy\">\n                    </app-tooltip>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"right-content\">\n            <div class=\"refresh-button\" (click)=\"onRefresh()\">\n                <app-tooltip text=\"Refresh\">\n                    <i class=\"material-icons\">autorenew</i>\n                </app-tooltip>\n            </div>\n\n            <app-language-picker\n                class=\"language--code\"\n                type=\"code\"\n                [selectedLanguage]=\"this.userService.preferences.language\"\n                (languageChanged)=\"onLanguageChanged($event)\"\n            ></app-language-picker>\n\n            <app-select-box\n                [listData]=\"contentTypeList\"\n                [selectedValue]=\"this.userService.preferences.lastContentType\"\n                (selectChanged)=\"onContentTypeChanged($event)\"\n            ></app-select-box>\n\n\n            <app-client-picker\n                [selectedClient]=\"this.userService.preferences.lastClientId\"\n                (clientChanged)=\"onUserChangedClient($event)\"\n            ></app-client-picker>\n\n            <div class=\"deeper-analysis-box\">\n                <app-toogle-slider\n                    [defaultActive]=\"isDefaultActiveDeeperAnalysis\"\n                    (_onChanged)=\"onDeeperAnalysisChanged($event)\"\n                ></app-toogle-slider>\n\n                <span>Deeper Analysis</span>\n            </div>\n        </div>\n    </div>\n\n    <app-loading-indicator [loading]=\"isLoading\" [error]=\"isError\">\n        <div *ngIf=\"!isLoading && !isError\" class=\"diagnose-main-content\">\n            <div class=\"diagnose-text\">\n                <app-diagnose-text [extended]=\"extended\"></app-diagnose-text>\n\n                <div class=\"deeper-box\" [ngClass]=\"{show: isDeep}\">\n                    <h4 class=\"deeper__title\">Spelling Mistakes</h4>\n                    <div class=\"spelling-mistake\">\n                        <p class=\"spelling-mistake__text\" *ngFor=\"let mistake of failingFragments\">{{ mistake.original }}</p>\n                    </div>\n\n                    <h4 class=\"deeper__title\">What caused which tag</h4>\n                    <div class=\"fail-topic\">\n                        <div class=\"fail-topic__item\" *ngFor=\"let mistake of failingFragments\">\n                            <app-topic\n                                *ngFor=\"let topic of mistake.failTopic | keyvalue\"\n                                [topic]=\"topic.key\"\n                                [level]=\"topic.value\"\n                            ></app-topic>\n                            <span class=\"fail-topic__text\">{{ mistake.text }}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"diagnose-side\">\n                <div class=\"side-item keyword\">{{ keyWord }}</div>\n                <div class=\"side-item topic-policy\">\n                    <div class=\"topic-box\">\n                        <h5 class=\"side-item-title\">Topics</h5>\n                        <app-topic\n                            *ngFor=\"let topic of topics | keyvalue\"\n                            [topic]=\"topic.key\"\n                            [level]=\"topic.value\"\n                        ></app-topic>\n                    </div>\n                    \n                    <div class=\"policy-box\">\n                        <h5 class=\"side-item-title\">Policy Guides</h5>\n                        <app-policy-guide \n                            *ngFor=\"let policy of policies\"\n                            [policy]=\"policy\"\n                        ></app-policy-guide>\n                    </div>\n                </div>\n\n                <div class=\"side-item ai-prediction\">\n                    <h5 class=\"side-item-title\">AI Prediction</h5>\n                    <app-progress-bar\n                        *ngFor=\"let predic of predictions | keyvalue\"\n                        [label]=\"predic.key | rightUnderscore\"\n                        [value]=\"predic.value\"\n                    ></app-progress-bar>\n                </div>\n\n                <div class=\"button-group\">\n                    <button class=\"item button--grey\" (click)=\"onShowRegressionBox()\">Escalate</button>\n                    <button class=\"item button--fountain-blue\">Gerkin Test</button>\n                    <button class=\"item button--light-green\">Create Rule</button>\n                </div>\n            </div>\n\n            <app-regression-test-box (_close)=\"onCloseRegressionBox()\" [isShow]=\"isShowRegressionBox\" [topics]=\"topics\"></app-regression-test-box>\n        </div>\n    </app-loading-indicator>\n</section>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreadcrumbModule } from 'xng-breadcrumb';\n\nimport { DiagnoseComponent } from './diagnose.component';\nimport { DiagnoseRoutingModule } from './diagnose-routing.module';\nimport { SharedComponentsModule } from 'src/app/shared-components/shared-components.module';\nimport { MainModule } from 'src/app/main/main.module';\nimport { TopicComponent } from './topic/topic.component';\nimport { PolicyGuideComponent } from './policy-guide/policy-guide.component';\nimport { RightUnderscorePipe, RiskLevelToColorPipe } from 'src/app/pipes';\nimport { DiagnoseTextComponent } from './diagnose-text/diagnose-text.component';\nimport { RegressionTestBoxComponent } from './regression-test-box/regression-test-box.component'\n\n@NgModule({\n  declarations: [\n    DiagnoseComponent,\n    TopicComponent,\n    PolicyGuideComponent,\n    RightUnderscorePipe,\n    RiskLevelToColorPipe,\n    DiagnoseTextComponent,\n    RegressionTestBoxComponent,\n  ],\n  imports: [\n    CommonModule,\n    BreadcrumbModule,\n    DiagnoseRoutingModule,\n    SharedComponentsModule,\n    MainModule,\n  ]\n})\nexport class DiagnoseModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Policy } from 'src/constants';\n\nconst SAFE_POLICY = {\n  icon: 'fas fa-thumbs-up',\n  color: '#7ED321',\n}\n\nconst UN_SAFE_POLICY = {\n  icon: 'fas fa-thumbs-down',\n  color: '#ED0423',\n}\n\n@Component({\n  selector: 'app-policy-guide',\n  templateUrl: './policy-guide.component.html',\n  styleUrls: ['./policy-guide.component.less']\n})\nexport class PolicyGuideComponent implements OnInit {\n  @Input() policy: Policy;\n  name: string;\n  icon: string;\n  color: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    const { isSafe, policyGuide } = this.policy;\n\n    const { icon, color } = isSafe ? SAFE_POLICY : UN_SAFE_POLICY;\n    this.icon = icon;\n    this.color = color;\n    this.name = policyGuide.name;\n  }\n}\n","<div class=\"policy\" [style.--color]=\"color\">\n    <i class=\"policy__icon fas\" [class]=\"icon\"></i>\n    <span class=\"policy__name\" [title]=\"name\">{{ name }}</span>\n</div>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DefaultLanguage, RiskLevels, TopicPickerSelected, Topics } from 'src/constants';\n\ninterface TopicViewModel {\n  name: string,\n  level: number,\n  icon: string,\n  riskColor: string,\n}\n\n@Component({\n  selector: 'app-regression-test-box',\n  templateUrl: './regression-test-box.component.html',\n  styleUrls: [ './regression-test-box.component.less' ]\n})\nexport class RegressionTestBoxComponent implements OnInit {\n  defaultLanguage = DefaultLanguage;\n  topicArray: Array<TopicViewModel> = [];\n  riskLevels = RiskLevels;\n  @Input() topics: { [topic: string]: any } = {};\n  @Input() isShow = false;\n  @Output() _close = new EventEmitter<boolean>();\n\n  constructor () { }\n\n  ngOnInit (): void {\n    // Handle topicArray\n    this.topicArray = Object.entries(this.topics).map(([ topic, level ]) => {\n      const { name, faIcon: icon } = Topics[topic];\n      const riskColor = RiskLevels[level].color;\n\n      return { name, level, icon, riskColor };\n    });\n  }\n\n  onClose () {\n    console.log('[app-regression-test-box] onClose exec ...');\n    this.isShow = false;\n    this._close.emit(false);\n  }\n\n  // Todo: handle language change\n  onLanguageChanged (language) {\n    console.log('[app-regression-test-box] onLanguageChanged selected language: ', language);\n  }\n\n  // Todo: handle level change\n  onChangeLevel (currentTopic: TopicViewModel, newLevel: string) {\n    console.log('[app-regression-test-box] onChangeLevel get currentTopic: [%s], newLevel: [%s]', currentTopic, newLevel);\n  }\n\n  // Todo: handle selected topic change\n  onTopicPickerChanged (topicSelected: TopicPickerSelected) {\n    console.log('[app-regression-test-box] onTopicPickerChanged get topicSelected: ', topicSelected);\n  }\n}\n","<div class=\"regression-wrapper\" [ngClass]=\"{'show': isShow}\">\n    <!-- overlay -->\n    <div class=\"overlay\" (click)=\"onClose()\"></div>\n    \n    <!-- regression box -->\n    <div class=\"regression-box\">\n        <h4 class=\"title\">Add it to the regression tests</h4>\n    \n        <!-- topic label -->\n        <div class=\"label-box\">\n            <p class=\"box-title\">How should it be labelled</p>\n    \n            <div class=\"topics\">\n                <div class=\"topic-item\" *ngFor=\"let topic of topicArray\">\n                    <i class=\"topic__icon fas\" [class]=\"topic.icon\"></i>\n                    <p class=\"topic__name\" [title]=\"topic.name\">{{ topic.name }}</p>\n    \n                    <div class=\"topic__level\">\n                        <app-tooltip *ngFor=\"let level of riskLevels | keyvalue\" [text]=\"level.value.name\">\n                            <div\n                                (click)=\"onChangeLevel(topic, level.key)\"                            \n                                [style.--background-color]=\"level.value.color\"\n                                [attr.data-label]=\"level.value.name\"\n                                [ngClass]=\"{'active': level.key == topic.level}\"\n                                class=\"level\"\n                                >{{ level.key }}\n                            </div>\n                        </app-tooltip>\n                    </div>\n                </div>\n            </div>\n        </div>\n    \n        <!-- topic-picker -->\n        <div class=\"topic-box\">\n            <p class=\"box-title\">Add Topics</p>\n    \n            <app-topic-picker [topicSelected]=\"topics\" (onSelectChanged)=\"onTopicPickerChanged($event)\"></app-topic-picker>\n        </div>\n    \n        <!-- language-picker -->\n        <div class=\"language-box\">\n            <p class=\"box-title\">Wrong Language?</p>\n    \n            <app-language-picker [selectedLanguage]=\"defaultLanguage\" (languageChanged)=\"onLanguageChanged($event)\">\n            </app-language-picker>\n        </div>\n    \n        <!-- comment -->\n        <div class=\"comment\">\n            <p class=\"box-title\">Leave a comment</p>\n    \n            <textarea name=\"\" id=\"\" rows=\"4\" placeholder=\"Type your Comment (Optional)\"></textarea>\n        </div>\n    \n        <!-- button group -->\n        <div class=\"button-group\">\n            <button class=\"item button--light-green\">Apply</button>\n            <button class=\"item button--black\" (click)=\"onClose()\">Cancel</button>\n        </div>\n    \n        <!-- close button -->\n        <div class=\"button-close\" (click)=\"onClose()\">\n            <i class=\"material-icons\">close</i>\n            <span>Close</span>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Topics, RiskLevels } from 'src/constants';\n\nenum Type {\n  compact = 'compact'\n}\n\n@Component({\n  selector: 'app-topic',\n  templateUrl: './topic.component.html',\n  styleUrls: ['./topic.component.less']\n})\nexport class TopicComponent implements OnInit {\n  @Input() topic: string;\n  @Input() level: any;\n  @Input() type: Type = null;\n\n  riskColor: string;\n  topicData: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.topicData = Topics[this.topic];\n    this.riskColor = RiskLevels[this.level].color;\n  }\n}\n","<container-element [ngSwitch]=\"type\">\n    <!-- compact style -->\n    <div class=\"topic topic--compact\" [style.--level-color]=\"riskColor\" *ngSwitchCase=\"'compact'\">\n        <i class=\"topic__icon fas\" [class]=\"topicData.faIcon\"></i>\n        <span class=\"topic__risk\">{{ level }}</span>\n    </div>\n\n    <!-- default style -->\n    <div class=\"topic\" [style.--level-color]=\"riskColor\" *ngSwitchDefault>\n        <i class=\"topic__icon fas\" [class]=\"topicData.faIcon\"></i>\n        <span class=\"topic__name\" [title]=\"topicData.name\">{{ topicData.name }}</span>\n        <span class=\"topic__risk\">{{ level }}</span>\n    </div>\n</container-element>","export * from './right-underscore/right-underscore.pipe'\nexport * from './risk-level-to-color/risk-level-to-color.pipe'","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'rightUnderscore'\n})\nexport class RightUnderscorePipe implements PipeTransform {\n\n  transform(value: string, args?: any): unknown {\n    value = value.replace(/.*_/, '');\n    return value;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { RiskLevels } from 'src/constants';\n\n@Pipe({\n  name: 'riskLevelToColor'\n})\nexport class RiskLevelToColorPipe implements PipeTransform {\n\n  transform(level: any): unknown {\n    const riskLevel = RiskLevels[level];\n    return riskLevel.color;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultService, TextInput } from 'classify-text-swagger-client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnoseService {\n\n  constructor(private api: DefaultService) {}\n\n  search(params?: TextInput) {\n    return this.api.classifyText(params).toPromise()\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PolicyGuide } from 'src/constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolicyService {\n  defaultPolicyGuide: Array<PolicyGuide> = [\n    {\n      name: 'Global Chat',\n      rules: [\n        { topic: '0', riskThreshold: 6 },\n        { topic: '5', riskThreshold: 5 },\n      ]\n    },\n    {\n      name: 'Private Chat',\n      rules: [\n        { topic: '5', riskThreshold: 6 },\n      ]\n    }\n  ];\n\n  constructor() { }\n\n  getPolicyGuides() {\n    // Todo: HttpRequest to get data from Backend API\n    // let return default data for now\n    return this.defaultPolicyGuide;\n  }\n}\n"]}